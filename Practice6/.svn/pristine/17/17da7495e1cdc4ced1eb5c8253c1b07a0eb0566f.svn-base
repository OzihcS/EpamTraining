package ua.nure.piontkovskyi.Practice6.part4;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

public class Graph {

    private int vertexNumber;
    private Map<Integer, List<Integer>> graph = new TreeMap<>();

    Graph(int n) {
        vertexNumber = n;
        for (int i = 1; i <= vertexNumber; i++) {
            graph.put(new Integer(i), new ArrayList<>());
        }
    }

    public String addEdge(Integer firstVertex, Integer secondVertex) {
        if (firstVertex > vertexNumber || secondVertex > vertexNumber ||
                firstVertex < 0 || secondVertex < 0) {
            return "Illegal vertexes!";
        }
        if (firstVertex.equals(secondVertex)) {
            return "Vertexes are equal!";
        }
        if (graph.get(firstVertex).contains(secondVertex) &&
                graph.get(secondVertex).contains(firstVertex)) {
            return "The edge between " + firstVertex + " and  " + secondVertex
                    + " already exists";
        }
        graph.get(firstVertex).add(secondVertex);
        graph.get(secondVertex).add(firstVertex);
        return "New edge was added between " + firstVertex + " and "
                + secondVertex;
    }

    public String removeEdge(Integer firstVertex, Integer secondVertex) {
        if (graph.get(firstVertex).contains(secondVertex) &&
                graph.get(secondVertex).contains(firstVertex)) {
            graph.get(firstVertex).remove(secondVertex);
            graph.get(secondVertex).remove(firstVertex);
            return "Edge between " + firstVertex + " and  " + secondVertex
                    + " was removed";
        } else {
            return "The edge between " + firstVertex + " and " + secondVertex
                    + " does not exist";
        }
    }

    public Map<Integer, List<Integer>> getGraph() {
        return graph;
    }
}

